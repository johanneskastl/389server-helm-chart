# Default values for 389server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: 389ds/dirsrv
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

envFrom: []
# - configMapRef:
#     name: config-map-name
# - secretRef:
#     name: secret-name

# For persistence, you should have your certificates stored in Kubernetes in a secret
# and mounted into the pod.
#
# You can either
# - generate a certificate resource to have cert-manager issue a secret for you or
# - provide the secret yourself
#
# Setting to true enables persistence of the TLS certificates
tls_certificates_from_secret:
  enabled: false

  # generate a certificate resource for cert-manager
  #
  # generate_certificate: true
  # certificate:
  #   commonName: ldap.example.com
  #   dnsNames:
  #     - ldap.example.com
  #     - ldapserver.example.com
  #   issuerRef:
  #     name: my-cert-resolver
  #     kind: ClusterIssuer
  #   secretName: ldap.example.com-tls
  #
  # if the secret created by cert-manager does not contain a ca.crt
  # (which is the case for e.g. Let's encrypt certificates)
  # you need to create an additional secret containing a ca.crt key with your certificate
  # mount_ca_secret:
  #   existingSecret: secret-name

  # specify an existing secret holding the certificates
  # existingSecret:
  #   name: secret-name

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: LoadBalancer
  ports:
    ldap-tcp:
      enabled: true
      port: 389
      protocol: TCP
      targetPort: 3389
    ldap-udp:
      enabled: false
      port: 389
      protocol: UDP
      targetPort: 3389
    ldaps-tcp:
      enabled: true
      port: 636
      protocol: TCP
      targetPort: 3636
    ldaps-udp:
      enabled: false
      port: 636
      protocol: UDP
      targetPort: 3636

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
